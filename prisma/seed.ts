import { PrismaClient } from "@prisma/client";
import bcrypt from "bcryptjs";

const prisma = new PrismaClient();

async function main() {
  console.log("üå± „Ç∑„Éº„Éâ„Éá„Éº„Çø„ÅÆ‰ΩúÊàê„ÇíÈñãÂßã„Åó„Åæ„Åô...");

  // UserTypeModel„ÅÆ‰ΩúÊàê
  await prisma.userTypeModel.createMany({
    data: [
      { name: "normal" },
      { name: "meister" },
    ],
    skipDuplicates: true,
  });

  // „Çµ„É≥„Éó„É´„É¶„Éº„Ç∂„Éº„ÅÆ‰ΩúÊàê
  const hashedPassword = await bcrypt.hash("password123", 10);

  const users = await Promise.all([
    prisma.user.upsert({
      where: { email: "normal@example.com" },
      update: {},
      create: {
        name: "Áî∞‰∏≠Â§™ÈÉé",
        email: "normal@example.com",
        employeeNumber: "EMP001",
        yearsOfService: 3,
        password: hashedPassword,
        userType: "normal",
      },
    }),
    prisma.user.upsert({
      where: { email: "meister@example.com" },
      update: {},
      create: {
        name: "Â±±Áî∞Ëä±Â≠ê",
        email: "meister@example.com",
        employeeNumber: "EMP002",
        yearsOfService: 8,
        password: hashedPassword,
        userType: "meister",
      },
    }),
  ]);

  console.log("‚úÖ „É¶„Éº„Ç∂„Éº„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü:", users);
  console.log("üéâ „Ç∑„Éº„Éâ„Éá„Éº„Çø„ÅÆ‰ΩúÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ");
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error("‚ùå „Ç∑„Éº„Éâ„Ç®„É©„Éº:", e);
    await prisma.$disconnect();
    process.exit(1);
  });